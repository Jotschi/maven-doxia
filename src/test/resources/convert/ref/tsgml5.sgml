<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
<article lang="en">
  <!-- PB -->
  <section>
    <title id="s.1">The
      <anchor id="a.docc">docc utility
    </title>
    <para>See also
      <link linkend="a.thedocxutility">the docx
utility</link>.
    </para>
    <para>docc is auto-documented. Simply type
      <literal>docc</literal> to list its
generic options:
    </para>
    <programlisting>$ docc
usage: docc target_format [generic_options] [format_options] {input_file}+

target_format: latex, man, html, rtf or href (pseudo-format)

Note that PTF comments are automatically extracted from C/C++ source files
using docx if the extension of the input file name is .[hH]* or .[cC]*. Tcl
source files are supported too if the extension of the input file name is .tcl
or .TCL.

generic_options:
-c 
Each input file is individually translated to a stand-alone
documentation file (like 'cc -c').
Default: all input files are translated to a single output file.
-o &lt;%255s&gt;
Specify the name of the output file (like 'cc -o').
Default: the basename of the input file+a format specific suffix.
-href (-h) &lt;%255s&gt;
Specify the name of the hypertext references file to be loaded
(generated during a first pass using the 'href' pseudo-format).
Default: none.
-sed (-s) &lt;%255s&gt;
Specify the name of a file which contains sed commands. These
sed commands are applied to all PTF source files (even if
automatically extracted using docx) just before their translation
to the target format.
Default: none.
-borders (-b) 
Tell docx to add borders around extracted code.
Default: no borders.

Type 'docc target_format' to list the options related to
target_format.</programlisting>
    <para>Then, for example, type
      <literal>docc rtf</literal> to list the options
related to the RTF format:
    </para>
    <programlisting>$ docc rtf
-linear (-li) 
The output RTF file does not contain hypertext links a la WinHelp.
Default: non linear (WinHelp).
-adobefonts (-af) 
Use Adobe fonts (Helvetica, Times, etc).
Default: Windows fonts (Arial, Time New Roman, etc).</programlisting>
    <section>
      <title id="s.1.1">Examples</title>
      <section>
        <title id="s.1.1.1">LaTeX</title>
        <para>PTF comments are directly extracted from C/C++ sources files.</para>
        <programlisting>$ cd tmp
$ docc latex -dc article -dco a4paper \
-ti 'The PTF Format and Related Utilties' \
-o ptf.tex ptf.txt docc.cc docx.cc
$ ls
ptf.tex</programlisting>
      </section>
      <section>
        <title id="s.1.1.2">troff -man</title>
        <para>docc is run on docc.cc and then on docx.cc to generate two man pages
with different headers.</para>
        <programlisting>$ cd tmp
$ docc man -c -ti docc -se 1 -he 'Text Utilities' -fo Pixware docc.cc
$ docc man -c -ti docx -se 1 -he 'Text Utilities' -fo Pixware docx.cc
$ ls
docc.man        docx.man</programlisting>
      </section>
      <section>
        <title id="s.1.1.3">HTML</title>
        <para>The hardest format to generate is HTML because in this case you must run
docc twice, example:</para>
        <variablelist>
          <varlistentry>
            <term>First pass</term>
            <listitem>
              <para>Resolve all hypertext links and save them in a file called
                <literal>hrefs</literal>. To do this, you need to use the
                <emphasis>href</emphasis> pseudo-format.
              </para>
              <programlisting>$ cd tmp
$ docc href -o hrefs ptf.txt docc.cc docx.cc
$ ls
hrefs</programlisting>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Second pass</term>
            <listitem>
              <para>For each input file, generate an HTML file (the -c option). Load file
                <literal>hrefs</literal> (the -h hrefs option) to be able to resolve hypertext
links.
              </para>
              <programlisting>$ docc html -br -h hrefs -c ptf.txt docc.cc docx.cc
$ ls
docc.html        hrefs           previous.gif
docx.html        next.gif        ptf.html</programlisting>
              <para>The -br option is used to chain the generated HTML files not only
through hypertext links but also sequentially (i.e. like the pages of a
book).</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section>
        <title id="s.1.1.4">RTF</title>
        <para>Always use -o when generating non-linear RTF format (WinHelp) to get a
single .rtf file and a single .hpj (help project) file.</para>
        <programlisting>$ cd tmp
$ docc rtf -o docc.rtf ptf.txt docc.cc docx.cc
$ ls
docc.hpj        docc.rtf</programlisting>
        <para>Unlike the HTML format, the generation of WinHelp files does not require
running docc twice. The hypertext links are resolved by the help compiler
(example
          <literal>hc31.exe</literal>) that you must run under DOS on the
generated .hpj file.
        </para>
        <programlisting>C&gt; hc31 docc</programlisting>
      </section>
    </section>
  </section>
</article>
